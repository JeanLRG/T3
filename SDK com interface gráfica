#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <time.h>
#include "telag2.h"

// Definições de cores
cor_t fucsia = { 1, 0.2, 0.8, 1 };
cor_t transparente = { 0, 0, 0, 0 };
cor_t branco = { 1, 1, 1, 1 };
cor_t vermelho = { 1, 0, 0, 1 };
cor_t amarelo = { 0.1, 0.6, 0.6, 1 };
cor_t azul = { 0, 0, 1, 1 };
cor_t verde = { 0, 1, 0, 1 };

// Estrutura de dados para pontuação
typedef struct {
    char jogador[20];
    int tabuleiro_id;
    int pontos; 
} pontuacao_t;

typedef struct {
    int id;
    int dificuldade;
    int matriz[9][9];
    bool preenchido[9][9]; // Matriz para marcar células preenchidas
} tabuleiro_t;

tabuleiro_t tabuleiros[100];
int num_tabuleiros = 0;
int tabuleiro_atual = -1;
clock_t tempo_inicio;

// Função para carregar os tabuleiros a partir do arquivo
void carregar_tabuleiros(const char *nome_arquivo) {
    FILE *arquivo = fopen(nome_arquivo, "r");
    if (!arquivo) {
        printf("Erro ao abrir o arquivo de tabuleiros.\n");
        return;
    }

    fscanf(arquivo, "%d", &num_tabuleiros);
    for (int i = 0; i < num_tabuleiros; i++) {
        fscanf(arquivo, "%d %d", &tabuleiros[i].id, &tabuleiros[i].dificuldade);
        for (int j = 0; j < 9; j++) {
            for (int k = 0; k < 9; k++) {
                fscanf(arquivo, "%d", &tabuleiros[i].matriz[j][k]);
                tabuleiros[i].preenchido[j][k] = (tabuleiros[i].matriz[j][k] != 0);
            }
        }
    }
    fclose(arquivo);
}

// Função para gerar um número aleatório entre o mínimo e o máximo
int aleatorio_entre(int min, int max) {
    return min + rand() % (max - min + 1);
}

// Funções para ler e escrever pontuações
void ler_pontuacoes(const char* arquivo, pontuacao_t** pontuacoes, int* num_pontuacoes) {
    FILE* file = fopen(arquivo, "r");
    if (file == NULL) {
        *num_pontuacoes = 0;
        *pontuacoes = NULL;
        return;
    }

    fscanf(file, "%d", num_pontuacoes);
    *pontuacoes = (pontuacao_t*)malloc(*num_pontuacoes * sizeof(pontuacao_t));
    for (int i = 0; i < *num_pontuacoes; i++) {
        fscanf(file, "%s %d %d", (*pontuacoes)[i].jogador, &(*pontuacoes)[i].tabuleiro_id, &(*pontuacoes)[i].pontos);
    }
    fclose(file);
}

void escrever_pontuacoes(const char* arquivo, pontuacao_t* pontuacoes, int num_pontuacoes) {
    FILE* file = fopen(arquivo, "w");
    if (file == NULL) {
        perror("Erro ao abrir arquivo de pontuações");
        exit(EXIT_FAILURE);
    }

    fprintf(file, "%d\n", num_pontuacoes);
    for (int i = 0; i < num_pontuacoes; i++) {
        fprintf(file, "%s %d %d\n", pontuacoes[i].jogador, pontuacoes[i].tabuleiro_id, pontuacoes[i].pontos);
    }
    fclose(file);
}

// Função que desenha o tabuleiro do Sudoku colorido e faz a mudança de cor entre as linhas quando separa estas em matrizes 3x3 
void tabuleiro(int tam, int tabuleiro[9][9]) {
    int inicio_x = 100, inicio_y = 100;
    int tamanho_celula = 50;

    tela_texto((ponto_t){600, 50}, 40, vermelho, "DESISTIR");
    for (int i = 0; i <= tam; i++) {
        cor_t cor_linha = (i % 3 == 0) ? vermelho : azul;

        tela_linha((ponto_t){inicio_x + i * tamanho_celula, inicio_y},
                   (ponto_t){inicio_x + i * tamanho_celula, inicio_y + tam * tamanho_celula},
                   (i % 3 == 0) ? 4 : 2, cor_linha);

        tela_linha((ponto_t){inicio_x, inicio_y + i * tamanho_celula},
                   (ponto_t){inicio_x + tam * tamanho_celula, inicio_y + i * tamanho_celula},
                   (i % 3 == 0) ? 4 : 2, cor_linha);
    }

    // Desenha os números no tabuleiro
    for (int i = 0; i < tam; i++) {
        for (int j = 0; j < tam; j++) {
            if (tabuleiro[i][j] != 0) {
                char str[2];
                snprintf(str, sizeof(str), "%d", tabuleiro[i][j]);
                tela_texto((ponto_t){inicio_x + j * tamanho_celula + 15, inicio_y + i * tamanho_celula + 35}, 20, branco, str);
            }
        }
    }
}

// Função que desenha a tela inicial
void desenha_tela_inicio() {
    tela_retangulo((retangulo_t){{0, 0}, {800, 800}}, 0, transparente, transparente); // Limpa a tela
    tela_texto((ponto_t){220, 200}, 100, verde, "SUDOKU");
    tela_texto((ponto_t){350, 400}, 50, vermelho, "JOGAR");
    tela_texto((ponto_t){350, 600}, 50, vermelho, "SAIR");
    tela_retangulo((retangulo_t){{319, 354}, {210, 60}}, 4, vermelho, transparente); // Botão JOGAR
    tela_retangulo((retangulo_t){{335, 550}, {150, 60}}, 4, vermelho, transparente); // Botão SAIR
}

// Função que verifica se um ponto está dentro de um retângulo
bool verifica_clique(retangulo_t retangulo, ponto_t ponto) {
    return (ponto.x >= retangulo.inicio.x && ponto.x <= retangulo.inicio.x + retangulo.tamanho.largura &&
            ponto.y >= retangulo.inicio.y && ponto.y <= retangulo.inicio.y + retangulo.tamanho.altura);
}

// Função que desenha a tela de vitória
void tela_ganhou() {
    tela_retangulo((retangulo_t){{0, 0}, {800, 800}}, 0, transparente, transparente); // Limpa a tela
    tela_texto((ponto_t){350, 200}, 50, verde, "PARABÉNS, VOCÊ GANHOU");
    tela_texto((ponto_t){740, 740}, 10, vermelho, "SAIR");
}

// Função para verificar se um número está presente em uma linha
bool verifica_linha(int tabuleiro[9][9], int linha, int num) {
    for (int col = 0; col < 9; col++) {
        if (tabuleiro[linha][col] == num) {
            return true;
        }
    }
    return false;
}

// Função para verificar se um número está presente em uma coluna
bool verifica_coluna(int tabuleiro[9][9], int coluna, int num) {
    for (int linha = 0; linha < 9; linha++) {
        if (tabuleiro[linha][coluna] == num) {
            return true;
        }
    }
    return false;
}

// Função para verificar se um número está presente em uma subgrade 3x3
bool verifica_subgrade(int tabuleiro[9][9], int inicio_linha, int inicio_coluna, int num) {
    for (int linha = 0; linha < 3; linha++) {
        for (int coluna = 0; coluna < 3; coluna++) {
            if (tabuleiro[inicio_linha + linha][inicio_coluna + coluna] == num) {
                return true;
            }
        }
    }
    return false;
}

// Função para verificar se o tabuleiro está correto
bool verifica_tabuleiro(int tabuleiro[9][9]) {
    for (int linha = 0; linha < 9; linha++) {
        for (int coluna = 0; coluna < 9; coluna++) {
            int num = tabuleiro[linha][coluna];
            if (num == 0) continue; // Ignora células vazias

            if (!(verifica_linha(tabuleiro, linha, num) && 
                  verifica_coluna(tabuleiro, coluna, num) && 
                  verifica_subgrade(tabuleiro, linha - linha % 3, coluna - coluna % 3, num))) {
                return false;
            }
        }
    }
    return true;
}

// Função para calcular o tempo decorrido
char* tempo_decorrido(clock_t inicio) {
    static char buffer[20];
    clock_t agora = clock();
    double segundos = (double)(agora - inicio) / CLOCKS_PER_SEC;
    snprintf(buffer, sizeof(buffer), "%.2f s", segundos);
    return buffer;
}

void tela_sair() {
    tela_fim();
}

int main() {
    srand(time(NULL)); // Inicializa o gerador de números aleatórios com a semente do relógio
    tela_inicio((tamanho_t){800, 800}, "SUDOKU");

    int mat[9][9] = {0}; // Inicializa o tabuleiro com zeros
    bool jogando = false;
    bool mostrando_inicio = true; // Flag para saber se a tela inicial está visível
    tempo_inicio = clock(); // Marca o início do jogo

    while (true) {
        if (mostrando_inicio) {
            desenha_tela_inicio(); // Desenha a tela inicial

            rato_t rato = tela_rato(); // Obtém o estado do rato
            if (rato.clicado[0]) {
                ponto_t click = rato.posicao; // Obtém a posição do clique do rato

                if (verifica_clique((retangulo_t){{319, 354}, {210, 60}}, click)) {
                    mostrando_inicio = false; // Muda o estado para não mostrar mais a tela inicial
                    jogando = true;
                }
                else if (verifica_clique((retangulo_t){{335, 550}, {150, 60}}, click)) {
                    tela_sair(); // Encerra o programa
                    return 0;
                }
            }
        } 
        else if (jogando) {
            tabuleiro(9, mat); // Desenha o tabuleiro do Sudoku

            rato_t rato = tela_rato(); // Obtém o estado do rato
            if (rato.clicado[0]) {
                ponto_t click = rato.posicao; // Obtém a posição do clique do rato

                // Falta implementar a lógica para colocar números no tabuleiro
                int linha = (click.y - 100) / 50; // Calcular a linha com base na posição do clique
                int coluna = (click.x - 100) / 50; // Calcular a coluna com base na posição do clique

                // Verificar se o clique está dentro do tabuleiro
                if (linha >= 0 && linha < 9 && coluna >= 0 && coluna < 9) {
                    int numero = aleatorio_entre(1, 9); // Gerar um número aleatório entre 1 e 9
                    mat[linha][coluna] = numero; // Colocar o número no tabuleiro
                }

                if (verifica_tabuleiro(mat)) {
                    tela_ganhou();
                    jogando = false;
                }
            }

            // Desenhar o tempo decorrido
            tela_texto((ponto_t){10, 10}, 20, branco, tempo_decorrido(tempo_inicio));
        }

        tela_atualiza(); // Atualiza a tela continuamente
    }

    tela_fim(); // Encerra a tela
    return 0;
}
